{"version":3,"sources":["PodcastInput.js","PodcastItem.js","App.js","serviceWorker.js","index.js"],"names":["PodcastInput","handleChangeText","e","preventDefault","setState","podcastInput","target","value","handleFromOnChange","userInputFrom","handleToOnChange","userInputTo","selectChange","console","log","options","selectedIndex","text","genreSelected","state","genres","axios","url","method","responseType","headers","then","res","data","htmlFor","type","name","id","this","onChange","map","genre","key","onClick","event","props","inputText","locationData","Component","PodcastItem","displaySuggestion","transitTime","title","length","description","image","className","src","alt","style","display","Math","round","pedestrian","bicycle","fastest","App","timeChange","time","arr","split","parseInt","from","to","resultsArray","timeInMins","modes","forEach","mode","params","routeType","route","push","formattedTime","catch","er","setTimeout","results","podcastCall","genreSel","q","len_max","genre_ids","podcasts","clearResults","window","scrollTo","inputRef","React","createRef","podcast","title_original","description_original","audio_length_sec","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c5810135.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nclass PodcastInput extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      podcastInput: \"\",\r\n      userInputFrom: \"\",\r\n      userInputTo: \"\",\r\n      genres: [],\r\n      genreSelected: \"\",\r\n      \r\n    };\r\n  }\r\n\r\n  handleChangeText = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      podcastInput: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleFromOnChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      userInputFrom: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleToOnChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      userInputTo: e.target.value,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios({\r\n      url: `https://listen-api.listennotes.com/api/v2/genres`,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      headers: {\r\n        \"X-ListenAPI-Key\": `d45d36385df142229be4941f98e07c20`,\r\n      }\r\n    }).then((res)=>{\r\n      this.setState({\r\n        genres: res.data.genres\r\n      })\r\n    })\r\n  }\r\n\r\n  selectChange = (e) => {\r\n    // getting the name of the selected option\r\n    console.log(e.target.options[e.target.selectedIndex].text);\r\n\r\n    // this.setState({\r\n    //   podcastInput: \"\",\r\n    //   genreSelected: \"\",\r\n    // })\r\n\r\n    // if (this.state.podcastInput === \"\") {\r\n      this.setState({\r\n        podcastInput: e.target.options[e.target.selectedIndex].text,\r\n        genreSelected: e.target.value,\r\n      })\r\n    // } else {\r\n    //     this.setState({\r\n    //       genreSelected: e.target.value,\r\n    //     })\r\n    // }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label htmlFor=\"userInputFrom\">From</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"userInputFrom\"\r\n            id=\"userInputFrom\"\r\n            value={this.state.userInputFrom}\r\n            onChange={this.handleFromOnChange}\r\n          />\r\n\r\n          <label htmlFor=\"userInputTo\">To</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"userInputTo\"\r\n            id=\"userInputTo\"\r\n            value={this.state.userInputTo}\r\n            onChange={this.handleToOnChange}\r\n          />\r\n          \r\n          <label htmlFor=\"podcastInput\"></label>\r\n          <input\r\n            onChange={this.handleChangeText}\r\n            type=\"text\"\r\n            name=\"podcastInput\"\r\n            id=\"podcastInput\"\r\n            value={this.state.podcastInput}\r\n          ></input>\r\n\r\n          <select type=\"genresSelect\" id=\"genreSelect\" name=\"genreSelect\" onChange={this.selectChange}>\r\n            <option value=\"\">Please select an genre</option>\r\n            {\r\n              this.state.genres.map((genre)=>{\r\n                return(\r\n                  <option value={genre.id} key={genre.id}>{genre.name}</option>\r\n                )\r\n              })\r\n            }\r\n          </select>\r\n\r\n          <button\r\n            onClick={(event) => {\r\n              // this.props.locationData(event, this.state.userInputFrom, this.state.userInputTo)\r\n              this.props.inputText(event, this.state.podcastInput, this.state.genreSelected);\r\n              this.props.locationData(event, this.state.userInputFrom, this.state.userInputTo)\r\n              this.setState({\r\n                podcastInput: \"\",\r\n                userInputFrom: \"\",\r\n                userInputTo: \"\",\r\n                genreSelected: \"\"\r\n              });\r\n            }}\r\n          >\r\n            Click me\r\n          </button>\r\n        </form>  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PodcastInput;\r\n","import React, { Component } from 'react';\r\n\r\nclass PodcastItem extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state= {\r\n            displaySuggestion: false\r\n        }\r\n    }\r\n\r\n    displaySuggestion = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            displaySuggestion: !this.state.displaySuggestion,\r\n        });\r\n    };\r\n\r\n    render(){\r\n        const {transitTime, title, description, length, image} = this.props;\r\n        return(   \r\n                <li>\r\n                    <button onClick={this.displaySuggestion} className=\"podcastButton\">\r\n                        <div className=\"thumbnailWrapper\">\r\n                            <img\r\n                                src={image}\r\n                                alt={title}\r\n                            ></img>\r\n                            <p>{title}</p>\r\n                        </div>\r\n                    </button>\r\n\r\n                    <div \r\n                        onClick={this.displaySuggestion}\r\n                        className=\"suggestion\"\r\n                        style={{\r\n                            display: this.state.displaySuggestion ? \"block\" : \"none\",\r\n                        }}\r\n                    >\r\n                        {\r\n                            Math.round(length / 60) <= 1 ? (\r\n                                <p>\r\n                                    podcast length:{Math.round(length / 60)}{\" \"}\r\n                        minute\r\n                                </p>\r\n                            ) : (\r\n                                    <p>\r\n                                        podcast length:{Math.round(length / 60)}{\" \"}\r\n                        minutes\r\n                                    </p>\r\n                                )\r\n                        }\r\n\r\n                        <p> walk:{transitTime.pedestrian} minutes</p>\r\n                        <p>bike:{transitTime.bicycle} minutes</p>\r\n                        <p>drive:{transitTime.fastest} minutes</p>\r\n\r\n                        {\r\n                            length / 60 < transitTime.fastest ?\r\n                                <p>suggestion: you should drive</p> :\r\n                                length / 60 < transitTime.bicycle ?\r\n                                    <p>suggestion: you should bike</p> :\r\n                                    <p>suggestion: you should walk</p>\r\n                        }\r\n                    </div>\r\n                </li>\r\n                )\r\n    }\r\n}\r\n\r\nexport default PodcastItem;","import React, { Component }from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.scss\";\r\nimport PodcastInput from \"./PodcastInput\";\r\nimport PodcastItem from \"./PodcastItem\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      results: [],\r\n      modes: [\"bicycle\", \"pedestrian\", \"fastest\"],\r\n      genres: [],\r\n      transitTime: {},\r\n      podcasts: [],\r\n    };\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  timeChange = (time) => {\r\n    const arr = time.split(\":\");\r\n    const add =\r\n      parseInt(arr[0] * 60) + parseInt(arr[1]) + parseInt(arr[2] / 60);\r\n\r\n    return add;\r\n  };\r\n\r\n  locationData = (e, from, to) => {\r\n    e.preventDefault();\r\n\r\n    const resultsArray = [];\r\n    const timeInMins = {};\r\n    // const promiseArr = [];\r\n\r\n    this.state.modes.forEach((mode) => {\r\n      axios({\r\n        url: `https://www.mapquestapi.com/directions/v2/route`,\r\n        method: `GET`,\r\n        responseType: `json`,\r\n        params: {\r\n          key: `x3MrPIPmomzlRE4OXlE1fjsepd4chw3q`,\r\n          from: from,\r\n          to: to,\r\n          routeType: mode,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          console.log(res.data.route);\r\n          resultsArray.push(res.data.route);\r\n\r\n          timeInMins[mode]= this.timeChange(res.data.route.formattedTime);\r\n          console.log(timeInMins);\r\n        })\r\n        .catch((er) => {\r\n          console.log(er);\r\n        });\r\n    });\r\n\r\n    // Promise.all(promiseArr).then((res) => {\r\n    //   console.log(res, 'result');\r\n    // })\r\n\r\n    \r\n\r\n    // change to async LATER!!!!\r\n    setTimeout(() => {\r\n      this.setState({\r\n        results: resultsArray,\r\n        transitTime: timeInMins,\r\n      });\r\n    }, 800);\r\n  };\r\n\r\n  podcastCall = (e, inputText, genreSel) => {\r\n    e.preventDefault();\r\n\r\n    axios({\r\n      url: `https://listen-api.listennotes.com/api/v2/search`,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      headers: {\r\n        \"X-ListenAPI-Key\": `d45d36385df142229be4941f98e07c20`,\r\n      },\r\n      params: {\r\n        q: inputText,\r\n        len_max: this.state.transitTime.pedestrian,\r\n        genre_ids: genreSel,\r\n      },\r\n    }).then((res) => {\r\n      console.log(res.data.results);\r\n      this.setState({\r\n        podcasts: res.data.results,\r\n      });\r\n    });\r\n  };\r\n  \r\n\r\n  clearResults = () => {\r\n    this.setState({\r\n      podcasts: [],\r\n    });\r\n\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App wrapper\">\r\n\r\n        <PodcastInput inputText={this.podcastCall} locationData={this.locationData}/>\r\n\r\n        <ul>\r\n          {\r\n            this.state.podcasts.map((podcast)=> {\r\n              const {id, image, title_original, description_original, audio_length_sec} = podcast\r\n              return(\r\n                <PodcastItem key={id} image={image} title={title_original} description={description_original} length={audio_length_sec} transitTime={this.state.transitTime} />\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n\r\n        {\r\n          // Start over the search BUTTON. Only gets visible when there's a list of podcasts on the page.\r\n          this.state.podcasts.length !== 0 ? (\r\n            <button onClick={this.clearResults}>Start over</button>\r\n          ) : null\r\n        }\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//Landing header with a Get Started button, or arrow, moves to user input\r\n\r\n// User inputs for To and From\r\n\r\n// Error handling for empty inputs, regex to prevent special characters from being typed, error when address can't be found\r\n\r\n// Users submit map requests\r\n\r\n// Get travel time and distance.  Convert time to minutes and store in state\r\n\r\n// Genre dropdown or user search for podcast, user submits\r\n\r\n// take genre/search value, add time state to API query, returns 10 results\r\n\r\n// map results to page, clicking on a podcast will show whether they should walk or bike, under the grid of the results\r\n\r\n/* Components:\r\nApp\r\nLocation Input: onChange: handleLocation\r\nPodcast Input: onChange:handlepodcast\r\nPodcast Grid\r\nTravel Mode Result\r\nReset Button\r\n*/\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}