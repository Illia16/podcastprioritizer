{"version":3,"sources":["Error.js","PodcastInput.js","Suggestion.js","PodcastItem.js","PodcastSaved.js","database.js","App.js","serviceWorker.js","index.js"],"names":["Error","props","className","PodcastInput","handleChangeText","e","preventDefault","setState","target","name","value","selectChange","console","log","options","selectedIndex","text","podcastInput","genreSelected","state","userInputFrom","userInputTo","genres","popUpError","axios","url","method","responseType","headers","then","res","data","htmlFor","type","id","this","onChange","map","genre","key","onClick","event","inputText","handleSubmit","Component","Suggestion","showHideSuggestion","stateSuggestion","propToprop","length","transitTime","style","display","displaySuggestion","Math","round","pedestrian","bicycle","fastest","PodcastItem","title","image","description","savePodcast","listenUrl","src","alt","PodcastSaved","listenURL","deletePodcast","href","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","login","provider","auth","GoogleAuthProvider","signInWithPopup","result","user","userId","uid","logout","signOut","podcastList","dbRef","database","ref","podcast","child","set","remove","timeChange","time","arr","split","parseInt","from","to","params","format","start","end","size","countryCode","scalebar","margin","mapUrl","request","responseURL","modes","forEach","mode","routeType","manMaps","timeCopy","route","formattedTime","catch","er","podcastCall","genreSel","q","len_max","genre_ids","results","podcasts","clearResults","window","scrollTo","onAuthStateChanged","on","response","podArray","val","push","podcastItem","title_original","description_original","audio_length_sec","listennotes_url","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cbdc4f90.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nconst Error = ( props ) => {\r\n\r\n    return(\r\n        <div className=\"popupBack\">\r\n            <div className=\"popup\">\r\n                <p>Error</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Error from \"./Error\";\r\n\r\nclass PodcastInput extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      podcastInput: \"\",\r\n      userInputFrom: \"\",\r\n      userInputTo: \"\",\r\n      genres: [],\r\n      genreSelected: \"\",\r\n      popUpError: false,\r\n    };\r\n  }\r\n\r\n  // function that listens to OUR TEXT INPUTS AND SETS a value to the appropriate input\r\n  handleChangeText = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  // filling drop-down selection with podcast genres\r\n  componentDidMount() {\r\n    axios({\r\n      url: `https://listen-api.listennotes.com/api/v2/genres`,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      headers: {\r\n        \"X-ListenAPI-Key\": `d45d36385df142229be4941f98e07c20`,\r\n      },\r\n    }).then((res) => {\r\n      this.setState({\r\n        genres: res.data.genres,\r\n      });\r\n    });\r\n  }\r\n\r\n  selectChange = (e) => {\r\n    // getting the name of the selected option\r\n    console.log(e.target.options[e.target.selectedIndex].text);\r\n\r\n    // this.setState({\r\n    //   podcastInput: \"\",\r\n    //   genreSelected: \"\",\r\n    // })\r\n\r\n    // if (this.state.podcastInput === \"\") {\r\n    this.setState({\r\n      podcastInput: e.target.options[e.target.selectedIndex].text,\r\n      genreSelected: e.target.value,\r\n    });\r\n    // } else {\r\n    //     this.setState({\r\n    //       genreSelected: e.target.value,\r\n    //     })\r\n    // }\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label htmlFor=\"userInputFrom\">From</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"userInputFrom\"\r\n            id=\"userInputFrom\"\r\n            value={this.state.userInputFrom}\r\n            onChange={this.handleChangeText}\r\n          />\r\n\r\n          <label htmlFor=\"userInputTo\">To</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"userInputTo\"\r\n            id=\"userInputTo\"\r\n            value={this.state.userInputTo}\r\n            onChange={this.handleChangeText}\r\n          />\r\n          \r\n\r\n          <label htmlFor=\"podcastInput\"></label>\r\n          <input\r\n            onChange={this.handleChangeText}\r\n            type=\"text\"\r\n            name=\"podcastInput\"\r\n            id=\"podcastInput\"\r\n            value={this.state.podcastInput}\r\n          ></input>\r\n\r\n          <select\r\n            type=\"genresSelect\"\r\n            id=\"genreSelect\"\r\n            name=\"genreSelect\"\r\n            onChange={this.selectChange}\r\n          >\r\n            <option value=\"\">Please select an genre</option>\r\n            {this.state.genres.map((genre) => {\r\n              return (\r\n                <option value={genre.id} key={genre.id}>\r\n                  {genre.name}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n\r\n          {\r\n            this.state.popUpError ? <Error /> : null\r\n          }\r\n          \r\n          <button\r\n            onClick={ (event) => {\r\n              event.preventDefault();\r\n\r\n              if (!this.state.podcastInput || !this.state.userInputFrom || !this.state.userInputTo) {\r\n                console.log('Error')\r\n\r\n                this.setState({\r\n                  popUpError: true,\r\n                })\r\n\r\n              } else {\r\n                this.props.inputText(event, this.state.podcastInput, this.state.genreSelected);\r\n                this.props.handleSubmit(event, this.state.userInputFrom, this.state.userInputTo);\r\n                // this.setState({\r\n                //   podcastInput: \"\",\r\n                //   userInputFrom: \"\",\r\n                //   userInputTo: \"\",\r\n                //   genreSelected: \"\",\r\n                //   popUpError: false,\r\n                // })\r\n              }\r\n            }\r\n          }\r\n          >\r\n            Click me\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PodcastInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Suggestion extends Component {\r\n  render() {\r\n    const { showHideSuggestion, stateSuggestion, propToprop:{length, transitTime} } = this.props;\r\n\r\n    return (\r\n      <div\r\n      onClick={ showHideSuggestion }\r\n      className=\"suggestion\"\r\n      style={{ display: stateSuggestion.displaySuggestion ? \"block\" : \"none\", }} >\r\n        {\r\n            Math.round(length / 60) <= 1 ?\r\n                <p>podcast length:{Math.round(length / 60)} minute </p> :\r\n                <p>podcast length:{Math.round(length / 60)} minutes</p>\r\n        }\r\n\r\n        <p> walk:{transitTime.pedestrian} minutes</p>\r\n        <p>bike:{transitTime.bicycle} minutes</p>\r\n        <p>drive:{transitTime.fastest} minutes</p>\r\n\r\n        {\r\n            length / 60 < transitTime.fastest ?\r\n                <p>suggestion: you should drive</p> :\r\n                length / 60 < transitTime.bicycle ?\r\n                    <p>suggestion: you should bike</p> :\r\n                    <p>suggestion: you should walk</p>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Suggestion;\r\n","import React, { Component } from 'react';\r\nimport Suggestion from \"./Suggestion\";\r\n\r\nclass PodcastItem extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            displaySuggestion: false\r\n        }\r\n    }\r\n\r\n    showHideSuggestion = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            displaySuggestion: !this.state.displaySuggestion,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { transitTime, title, description, length, image, savePodcast, listenUrl, id } = this.props;\r\n        return (\r\n            <li>\r\n                <button onClick={ this.showHideSuggestion }className=\"podcastButton\">\r\n                    <div className=\"thumbnailWrapper\">\r\n                        <img src={image} alt={title}></img>\r\n                        <p>{title}</p>\r\n                    </div>\r\n                </button>\r\n\r\n                <button onClick={(e) => { savePodcast(e, title, image, listenUrl, id) }}>Save podcast</button>\r\n\r\n                <Suggestion showHideSuggestion={this.showHideSuggestion} stateSuggestion={this.state} propToprop={this.props}/>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PodcastItem;\r\n\r\n{/* <PodcastItem key={id} image={image} title={title_original} description={description_original} length={audio_length_sec} transitTime={this.state.transitTime} savePodcast={this.savePodcast} listenUrl={listennotes_url} id={id} /> */}","import React from 'react';\r\n\r\nconst PodcastSaved = (props) => {\r\n   const { title, listenURL, image, id, deletePodcast} = props\r\n        return(\r\n            <li className=\"podcastItem\">\r\n                <p>{title}</p>\r\n                <div className=\"podcastImageWrapper\">\r\n                    <img src={image} alt={title}></img>\r\n                </div>\r\n                <a href={listenURL}></a>\r\n                <button onClick={(e) => {deletePodcast(e, id)}}>Delete</button>\r\n            </li>\r\n        )\r\n    \r\n}\r\n\r\nexport default PodcastSaved;","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\"\r\nimport \"firebase/database\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBA4ai_gR73-t0M4UwfozSqZG4kFu7k3GA\",\r\n    authDomain: \"podcastprioritizer.firebaseapp.com\",\r\n    databaseURL: \"https://podcastprioritizer.firebaseio.com\",\r\n    projectId: \"podcastprioritizer\",\r\n    storageBucket: \"podcastprioritizer.appspot.com\",\r\n    messagingSenderId: \"703854841662\",\r\n    appId: \"1:703854841662:web:25566ffa1b31854dd7e66f\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.scss\";\r\nimport PodcastInput from \"./PodcastInput\";\r\nimport PodcastItem from \"./PodcastItem\";\r\nimport PodcastSaved from \"./PodcastSaved\";\r\nimport firebase from \"./database\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      modes: [\"bicycle\", \"pedestrian\", \"fastest\"],\r\n      genres: [],\r\n      transitTime: {},\r\n      podcasts: [],\r\n      mapUrl: \"\",\r\n      user: null,\r\n      userId: \"anonymous\",\r\n      podcastList: []\r\n    };\r\n  }\r\n\r\n  // Login method for Google Authentication\r\n  login = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    const auth = firebase.auth();\r\n\r\n    auth.signInWithPopup(provider).then((result) => {\r\n      const user = result.user;\r\n      this.setState({\r\n        user,\r\n        userId: user.uid,\r\n      })\r\n    })\r\n  }\r\n\r\n  // Logout method for Google Authentication\r\n  logout = () => {\r\n    const auth = firebase.auth();\r\n    auth.signOut().then(() => {\r\n      this.setState({\r\n        user: null,\r\n        userId: \"\",\r\n        podcastList: []\r\n      })\r\n    })\r\n  }\r\n\r\n  // Save podcast to user list when button is clicked\r\n  savePodcast = (e, title, image, listenUrl, id) => {\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // Prevent default\r\n    e.preventDefault();\r\n\r\n    // Create a new object with required items\r\n    const podcast = {\r\n      title: title,\r\n      image: image,\r\n      listenUrl: listenUrl,\r\n    }\r\n\r\n    // Go to the user's ID and the podcast ID and set the above object\r\n    dbRef.child(`${this.state.userId}/${id}`).set(podcast)\r\n  }\r\n  \r\n  // Delete podcast item from the user's list\r\n  deletePodcast = (e, key) => {\r\n\r\n    // Prevent default\r\n    e.preventDefault();\r\n\r\n    // Go to the user's ID in the database\r\n    const dbRef = firebase.database().ref(this.state.userId);\r\n\r\n    // Remove the podcast based on its ID\r\n    dbRef.child(key).remove();\r\n\r\n  }\r\n\r\n   // function to modify time from 00:00:00 format to minutes\r\n  timeChange = (time) => {\r\n    const arr = time.split(\":\");\r\n    const add = parseInt(arr[0] * 60) + parseInt(arr[1]) + parseInt(arr[2] / 60);\r\n    return add;\r\n  };\r\n\r\n  // making an API call for ROUTE\r\n  handleSubmit = (e, from, to) => {\r\n    // Prevent default\r\n    e.preventDefault();\r\n\r\n    // Axios call to mapquest API to get the map of the route  \r\n      axios({\r\n        url: `https://www.mapquestapi.com/staticmap/v5/map`,\r\n        method: `GET`,\r\n        responseType: `json`,\r\n        params: {\r\n          key: `x3MrPIPmomzlRE4OXlE1fjsepd4chw3q`,\r\n          format: `png`,\r\n          start: from,\r\n          end: to,\r\n          size: `200,200`,\r\n          countryCode: `CA`,\r\n          scalebar: true,\r\n          margin: 40,\r\n        },\r\n      }).then((res) => {\r\n        console.log(res);\r\n        this.setState({ mapUrl: res.request.responseURL });\r\n      });\r\n    \r\n    // For each mode of transportation, find the transit time, convert it to minutes and save it to state\r\n    this.state.modes.forEach((mode) => {\r\n      axios({\r\n        url: `https://www.mapquestapi.com/directions/v2/route`,\r\n        method: `GET`,\r\n        responseType: `json`,\r\n        params: {\r\n          key: `x3MrPIPmomzlRE4OXlE1fjsepd4chw3q`,\r\n          from: from,\r\n          to: to,\r\n          routeType: mode,\r\n          manMaps: true,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          const timeCopy = { ...this.state.transitTime }\r\n          timeCopy[mode] = this.timeChange(res.data.route.formattedTime);\r\n          this.setState({\r\n            transitTime: timeCopy,\r\n          });\r\n        })\r\n        .catch((er) => {\r\n          console.log(er);\r\n        });\r\n    });\r\n  };\r\n\r\n  // making an API call for PODCAST\r\n  podcastCall = (e, inputText, genreSel) => {\r\n    // Prevent default\r\n    e.preventDefault();\r\n\r\n    // call the listennotes API and search for podcasts\r\n    axios({\r\n      url: `https://listen-api.listennotes.com/api/v2/search`,\r\n      method: `GET`,\r\n      responseType: `json`,\r\n      headers: {\r\n        \"X-ListenAPI-Key\": `d45d36385df142229be4941f98e07c20`,\r\n      },\r\n      params: {\r\n        q: inputText,\r\n        len_max: this.state.transitTime.pedestrian,\r\n        genre_ids: genreSel,\r\n      },\r\n    }).then((res) => {\r\n      console.log(res.data.results);\r\n      this.setState({\r\n        podcasts: res.data.results,\r\n      });\r\n    });\r\n  };\r\n\r\n  // CLear the list of podcast results from the page\r\n  clearResults = () => {\r\n    this.setState({\r\n      podcasts: [],\r\n    });\r\n\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  // componentDidMount method\r\n  componentDidMount() {\r\n    const auth = firebase.auth();\r\n\r\n    // Check to see if the user was already logged in and set the state again\r\n    auth.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        this.setState({\r\n          user\r\n        });\r\n      }\r\n\r\n      // Set the userId state again\r\n      this.setState({\r\n        userId: this.state.user.uid\r\n      })\r\n\r\n      // Reference the userId in the database\r\n      const dbRef = firebase.database().ref(this.state.userId);\r\n\r\n      // On load/change grab the user's saved list of podcasts and save to state\r\n      dbRef.on('value', (response) => {\r\n\r\n        console.log(dbRef);\r\n        const podArray = [];\r\n        const data = response.val()\r\n\r\n        for (let key in data) {\r\n          podArray.push({ key: key, podcasts: data[key] })\r\n        }\r\n\r\n        this.setState({\r\n          podcastList: podArray\r\n        })\r\n      })\r\n    })\r\n  }\r\n\r\n  // render method\r\n  render() {\r\n    return (\r\n      <div className=\"App wrapper\">\r\n\r\n        {/* Header component */}\r\n        <header>\r\n          <h1>Podcast Prioritizer <i className=\"fas fa-headphones\"></i></h1>\r\n          <p>Can't decide which podcast to listen to on your next journey? Not sure whether you should walk, bike or drive? Use this web app by inputting your 'To', 'From', and a 'Podcast type' to determine which podcast you should listen to, and how you should get there.</p>\r\n        </header>\r\n      \r\n        {/* SAVED PODCAST BY CERTAIN USER */}\r\n        <ul>\r\n        {\r\n          this.state.podcastList.map((podcastItem) => {\r\n            const {key, podcasts} = podcastItem\r\n            return (\r\n              <PodcastSaved key={key} title={podcasts.title} image={podcasts.image} listenURL={podcasts.listenURL} deletePodcast={this.deletePodcast} id={key} />\r\n            )\r\n          })\r\n        }\r\n        </ul>\r\n\r\n        {/* Log In/ Log Out button */}\r\n        {this.state.user ? <button onClick={this.logout}>Log out</button> : <button onClick={this.login}>Log In </button>}\r\n        \r\n        {/* FORM INPUT */}\r\n        <PodcastInput inputText={this.podcastCall} handleSubmit={this.handleSubmit} />\r\n        \r\n        {/* SHOW MAP AND TRANSIT TIMES FOR EACH MODE OF TRANSPORTATION */}\r\n        <div className=\"transitMap\">\r\n          <div className=\"map\">\r\n            <img src={this.state.mapUrl} />\r\n          </div>\r\n\r\n          <ul\r\n            className=\"transit\"\r\n            style={{\r\n              display: this.state.transitTime.bicycle && this.state.transitTime.fastest && this.state.transitTime.pedestrian ? \"block\" : \"none\",\r\n            }}\r\n           >\r\n             \r\n            {\r\n              // walk time\r\n              this.state.transitTime.pedestrian <= 1 ? (\r\n                <li>walk time: {this.state.transitTime.pedestrian} minute</li>\r\n              ) : (\r\n                <li>walk time: {this.state.transitTime.pedestrian} minutes</li>\r\n              )\r\n              // bike time\r\n            }\r\n\r\n            {\r\n              this.state.transitTime.bicycle <= 1 ? (\r\n                <li>bike time: {this.state.transitTime.bicycle} minute</li>\r\n              ) : (\r\n                <li>bike time: {this.state.transitTime.bicycle} minutes</li>\r\n              )\r\n              // car time\r\n            }\r\n\r\n            {this.state.transitTime.fastest <= 1 ? (\r\n              <li>car time: {this.state.transitTime.fastest} minute</li>\r\n            ) : (\r\n              <li>car time: {this.state.transitTime.fastest} minutes</li>\r\n            )}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* LIST OF PODCASTS FROM THE SEARCH */}\r\n         <ul>\r\n          {\r\n            this.state.podcasts.map((podcast) => {\r\n              const { id, image, title_original, description_original, audio_length_sec, listennotes_url } = podcast\r\n              return (\r\n                <PodcastItem key={id} image={image} title={title_original} description={description_original} length={audio_length_sec} transitTime={this.state.transitTime} savePodcast={this.savePodcast} listenUrl={listennotes_url} id={id} />\r\n              )\r\n            })\r\n          }\r\n        </ul>\r\n\r\n        {/* CLEAR THE LIST OF PODCAST RESULTS */}\r\n        {\r\n          this.state.podcasts.length !== 0 ? (\r\n            <button onClick={this.clearResults}>Start over</button>\r\n          ) : null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//Landing header with a Get Started button, or arrow, moves to user input\r\n\r\n// User inputs for To and From\r\n\r\n// Error handling for empty inputs, regex to prevent special characters from being typed, error when address can't be found\r\n\r\n// Users submit map requests\r\n\r\n// Get travel time and distance.  Convert time to minutes and store in state\r\n\r\n// Genre dropdown or user search for podcast, user submits\r\n\r\n// take genre/search value, add time state to API query, returns 10 results\r\n\r\n// map results to page, clicking on a podcast will show whether they should walk or bike, under the grid of the results\r\n\r\n/* Components:\r\nApp\r\nLocation Input: onChange: handleLocation\r\nPodcast Input: onChange:handlepodcast\r\nPodcast Grid\r\nTravel Mode Result\r\nReset Button\r\n*/\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}